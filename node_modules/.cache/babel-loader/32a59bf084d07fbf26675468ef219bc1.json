{"ast":null,"code":"// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n// 实现转化type类型，string， function， class， component， fragment\n// 实现事件\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n  // console.log(vnode);\n  // vnodeTree => domTree\n  const node = _createNode(vnode);\n\n  container.appendChild(node);\n} // 创建class节点\n\n\nfunction _createComNode({\n  type,\n  props\n}) {\n  let comp = new type(props);\n  let vvnode = comp.render();\n\n  let vnode = _createNode(vvnode);\n\n  return vnode;\n} // 创建function节点\n\n\nfunction _createFnNode({\n  type,\n  props\n}) {\n  let vvnode = type(props);\n\n  let vnode = _createNode(vvnode);\n\n  return vnode;\n} // 创建节点\n\n\nfunction _createNode(vnode) {\n  const {\n    type,\n    props\n  } = vnode;\n  let node; // 如果vnode是文本节点\n\n  if (type === 'Text') {\n    node = document.createTextNode('');\n  } else if (typeof type === 'function') {\n    // 如果是class组件节点\n    if (type.prototype.isReactComponent) {\n      node = _createComNode(vnode);\n    } else {\n      // 如果是function组件节点\n      node = _createFnNode(vnode);\n    }\n  } else if (type) {\n    // 如果是元素节点\n    node = document.createElement(type);\n  } else {\n    // 如果type是一个fragment\n    // document。createDocumentFragment 将文档碎片插入到父元素\n    node = document.createDocumentFragment();\n  } // 将属性填充进节点中\n\n\n  if (type) {\n    _updateNode(node, props);\n  } //由于存在children，所以需要递归\n\n\n  _createChildrenNode(props.children, node);\n\n  return node;\n} // 接收子节点vnode数组以及父节点dom\n\n\nfunction _createChildrenNode(children, parent) {\n  for (let i = 0; i < children.length; i++) {\n    let _child = children[i];\n\n    if (Array.isArray(_child)) {\n      for (let j = 0; j < _child.length; j++) {\n        render(_child[j], parent);\n      }\n    } else {\n      render(children[i], parent);\n    }\n  }\n} // 接收dom以及props，进行赋值\n\n\nfunction _updateNode(node, values) {\n  Object.keys(values).filter(item => item !== 'children').forEach(key => {\n    if (key.slice(0, 2) === 'on') {\n      let _type = key.slice(2).toLocaleLowerCase();\n\n      console.log(_type);\n    }\n\n    node[key] = values[key];\n  });\n}\n\nexport default {\n  render\n};","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/plugins/KReactDOM.js"],"names":["render","vnode","container","node","_createNode","appendChild","_createComNode","type","props","comp","vvnode","_createFnNode","document","createTextNode","prototype","isReactComponent","createElement","createDocumentFragment","_updateNode","_createChildrenNode","children","parent","i","length","_child","Array","isArray","j","values","Object","keys","filter","item","forEach","key","slice","_type","toLocaleLowerCase","console","log"],"mappings":"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","sourcesContent":["// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n\n// 实现转化type类型，string， function， class， component， fragment\n// 实现事件\n\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n    // console.log(vnode);\n    // vnodeTree => domTree\n    const node = _createNode(vnode);\n\n    container.appendChild(node);\n}\n\n// 创建class节点\nfunction _createComNode({ type, props }) {\n    let comp = new type(props);\n    let vvnode = comp.render();\n    let vnode = _createNode(vvnode);\n    return vnode;\n}\n\n// 创建function节点\nfunction _createFnNode({ type, props }) {\n    let vvnode = type(props);\n    let vnode = _createNode(vvnode);\n    return vnode;\n}\n\n// 创建节点\nfunction _createNode(vnode) {\n    const { type, props } = vnode;\n    let node;\n    // 如果vnode是文本节点\n    if (type === 'Text') {\n        node = document.createTextNode('');\n    } else if (typeof type === 'function') {\n        // 如果是class组件节点\n        if (type.prototype.isReactComponent) {\n           node =  _createComNode(vnode);\n        } else {\n            // 如果是function组件节点\n            node = _createFnNode(vnode);\n        }\n    } else if (type) {\n        // 如果是元素节点\n        node = document.createElement(type);\n    } else {\n        // 如果type是一个fragment\n        // document。createDocumentFragment 将文档碎片插入到父元素\n        node = document.createDocumentFragment();\n    }\n\n    // 将属性填充进节点中\n    if (type) {\n        _updateNode(node, props);\n    }\n    \n    //由于存在children，所以需要递归\n    _createChildrenNode(props.children, node);\n\n    return node;\n}\n\n// 接收子节点vnode数组以及父节点dom\nfunction _createChildrenNode(children, parent) {\n    for(let i = 0; i < children.length; i++) {\n        let _child = children[i];\n        if (Array.isArray(_child)) {\n            for (let j = 0; j < _child.length; j++) {\n                render(_child[j], parent)\n            }\n        } else {\n            render(children[i], parent);\n        }\n    }\n}\n\n// 接收dom以及props，进行赋值\nfunction _updateNode(node, values) {\n    Object.keys(values)\n        .filter(item => item !== 'children')\n        .forEach(key => {\n            if (key.slice(0, 2) === 'on') {\n                let _type = key.slice(2).toLocaleLowerCase();\n                console.log(_type);\n            }\n            node[key] = values[key];\n        })\n}\n\nexport default {\n    render\n}"]},"metadata":{},"sourceType":"module"}