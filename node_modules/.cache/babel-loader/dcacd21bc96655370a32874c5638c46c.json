{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport createReactContext from '@ant-design/create-react-context';\nimport defaultRenderEmpty from './renderEmpty';\nexport var ConfigContext = createReactContext({\n  // We provide a default function for Context without provider\n  getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {\n    if (customizePrefixCls) return customizePrefixCls;\n    return \"ant-\".concat(suffixCls);\n  },\n  renderEmpty: defaultRenderEmpty\n});\nexport var ConfigConsumer = ConfigContext.Consumer;\nexport function withConfigConsumer(config) {\n  return function withConfigConsumerFunc(Component) {\n    // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods\n    var SFC = function SFC(props) {\n      return React.createElement(ConfigConsumer, null, function (configProps) {\n        var basicPrefixCls = config.prefixCls;\n        var getPrefixCls = configProps.getPrefixCls;\n        var customizePrefixCls = props.prefixCls;\n        var prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);\n        return React.createElement(Component, _extends({}, configProps, props, {\n          prefixCls: prefixCls\n        }));\n      });\n    };\n\n    var cons = Component.constructor;\n    var name = cons && cons.displayName || Component.name || 'Component';\n    SFC.displayName = \"withConfigConsumer(\".concat(name, \")\");\n    return SFC;\n  };\n}","map":{"version":3,"sources":["config-provider/context.jsx"],"names":["ConfigContext","createReactContext","getPrefixCls","renderEmpty","defaultRenderEmpty","ConfigConsumer","SFC","basicPrefixCls","config","configProps","customizePrefixCls","props","prefixCls","cons","Component","name"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,kBAAA,MAAA,kCAAA;AACA,OAAA,kBAAA,MAAA,eAAA;AACA,OAAO,IAAMA,aAAa,GAAGC,kBAAkB,CAAC;AAC5C;AACAC,EAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,SAAA,EAAA,kBAAA,EAAmC;AAC7C,QAAA,kBAAA,EACI,OAAA,kBAAA;AACJ,WAAA,OAAA,MAAA,CAAA,SAAA,CAAA;AALwC,GAAA;AAO5CC,EAAAA,WAAW,EAAEC;AAP+B,CAAD,CAAxC;AASP,OAAO,IAAMC,cAAc,GAAGL,aAAa,CAApC,QAAA;AACP,OAAO,SAAA,kBAAA,CAAA,MAAA,EAAoC;AACvC,SAAO,SAAA,sBAAA,CAAA,SAAA,EAA2C;AAC9C;AACA,QAAMM,GAAG,GAAI,SAAPA,GAAO,CAAA,KAAA,EAAA;AAAA,aAAY,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,IAAA,EACxB,UAAA,WAAA,EAAiB;AAAA,YACKC,cADL,GACwBC,MADxB,CAAA,SAAA;AAAA,YAENN,YAFM,GAEWO,WAFX,CAAA,YAAA;AAAA,YAGKC,kBAHL,GAG4BC,KAH5B,CAAA,SAAA;AAId,YAAMC,SAAS,GAAGV,YAAY,CAAA,cAAA,EAA9B,kBAA8B,CAA9B;AACA,eAAO,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA,KAAA,EAAA;AAAuC,UAAA,SAAS,EAAEU;AAAlD,SAAA,CAAA,CAAP;AANS,OAAY,CAAZ;AAAb,KAAA;;AASA,QAAMC,IAAI,GAAGC,SAAS,CAAtB,WAAA;AACA,QAAMC,IAAI,GAAIF,IAAI,IAAIA,IAAI,CAAb,WAACA,IAA6BC,SAAS,CAAvC,IAACD,IAAd,WAAA;AACAP,IAAAA,GAAG,CAAHA,WAAAA,GAAAA,sBAAAA,MAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAAA;AACA,WAAA,GAAA;AAdJ,GAAA;AAgBH","sourcesContent":["import * as React from 'react';\nimport createReactContext from '@ant-design/create-react-context';\nimport defaultRenderEmpty from './renderEmpty';\nexport const ConfigContext = createReactContext({\n    // We provide a default function for Context without provider\n    getPrefixCls: (suffixCls, customizePrefixCls) => {\n        if (customizePrefixCls)\n            return customizePrefixCls;\n        return `ant-${suffixCls}`;\n    },\n    renderEmpty: defaultRenderEmpty,\n});\nexport const ConfigConsumer = ConfigContext.Consumer;\nexport function withConfigConsumer(config) {\n    return function withConfigConsumerFunc(Component) {\n        // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods\n        const SFC = ((props) => (<ConfigConsumer>\n        {(configProps) => {\n            const { prefixCls: basicPrefixCls } = config;\n            const { getPrefixCls } = configProps;\n            const { prefixCls: customizePrefixCls } = props;\n            const prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);\n            return <Component {...configProps} {...props} prefixCls={prefixCls}/>;\n        }}\n      </ConfigConsumer>));\n        const cons = Component.constructor;\n        const name = (cons && cons.displayName) || Component.name || 'Component';\n        SFC.displayName = `withConfigConsumer(${name})`;\n        return SFC;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}