{"ast":null,"code":"// jsx => vnode\n// createElement 生成vnode\n// vnode 是一个对象 包含 type，props，children等值。注意：传入children 每行babel都会调用createElement，从而实现递归\nfunction createElement(type, props, ...children) {\n  if (type) {\n    delete props.__source;\n    delete props.__self;\n  } // 如果class组件有传入默认defaultProps\n\n\n  let defaultProps = {};\n\n  if (type && type.defaultProps) {\n    defaultProps = { ...type.defaultProps\n    };\n  }\n\n  return {\n    defaultProps,\n    type: type,\n    props: { ...props,\n      children: children.map(item => typeof item === 'object' ? item : _createTextNode(item))\n    }\n  };\n} // 因为文本节点只有内容，没有type和props等值，生成的vnode和其他树结构不符合，需要转换结构\n\n\nfunction _createTextNode(item) {\n  return {\n    type: 'Text',\n    props: {\n      nodeValue: item,\n      children: []\n    }\n  };\n}\n\nexport default {\n  createElement\n};","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/plugins/KReact.js"],"names":["createElement","type","props","children","__source","__self","defaultProps","map","item","_createTextNode","nodeValue"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoC,GAAGC,QAAvC,EAAiD;AAC7C,MAAIF,IAAJ,EAAU;AACN,WAAOC,KAAK,CAACE,QAAb;AACA,WAAOF,KAAK,CAACG,MAAb;AACH,GAJ4C,CAM7C;;;AACA,MAAIC,YAAY,GAAG,EAAnB;;AACA,MAAIL,IAAI,IAAIA,IAAI,CAACK,YAAjB,EAA+B;AAC3BA,IAAAA,YAAY,GAAG,EAAE,GAAGL,IAAI,CAACK;AAAV,KAAf;AACH;;AAED,SAAO;AACHA,IAAAA,YADG;AAEHL,IAAAA,IAAI,EAAEA,IAFH;AAGHC,IAAAA,KAAK,EAAE,EACH,GAAGA,KADA;AAEHC,MAAAA,QAAQ,EAAEA,QAAQ,CAACI,GAAT,CAAaC,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCC,eAAe,CAACD,IAAD,CAAtE;AAFP;AAHJ,GAAP;AAQH,C,CAID;;;AACA,SAASC,eAAT,CAAyBD,IAAzB,EAA+B;AAC3B,SAAO;AACHP,IAAAA,IAAI,EAAE,MADH;AAEHC,IAAAA,KAAK,EAAE;AACHQ,MAAAA,SAAS,EAAEF,IADR;AAEHL,MAAAA,QAAQ,EAAE;AAFP;AAFJ,GAAP;AAOH;;AAED,eAAe;AACXH,EAAAA;AADW,CAAf","sourcesContent":["// jsx => vnode\n// createElement 生成vnode\n// vnode 是一个对象 包含 type，props，children等值。注意：传入children 每行babel都会调用createElement，从而实现递归\n\nfunction createElement(type, props, ...children) {\n    if (type) {\n        delete props.__source;\n        delete props.__self;\n    }\n    \n    // 如果class组件有传入默认defaultProps\n    let defaultProps = {};\n    if (type && type.defaultProps) {\n        defaultProps = { ...type.defaultProps };\n    }\n\n    return {\n        defaultProps,\n        type: type,\n        props: {\n            ...props,\n            children: children.map(item => typeof item === 'object' ? item : _createTextNode(item))\n        }\n    }\n}\n\n\n\n// 因为文本节点只有内容，没有type和props等值，生成的vnode和其他树结构不符合，需要转换结构\nfunction _createTextNode(item) {    \n    return {\n        type: 'Text',\n        props: {\n            nodeValue: item,\n            children: []\n        }\n    }\n}\n\nexport default {\n    createElement\n}"]},"metadata":{},"sourceType":"module"}