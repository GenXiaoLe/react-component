{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport { getInputClassName } from './Input';\nvar ClearableInputType = tuple('text', 'input');\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\n\nvar ClearableLabeledInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ClearableLabeledInput, _React$Component);\n\n  function ClearableLabeledInput() {\n    _classCallCheck(this, ClearableLabeledInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClearableLabeledInput).apply(this, arguments));\n  }\n\n  _createClass(ClearableLabeledInput, [{\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _this$props = this.props,\n          allowClear = _this$props.allowClear,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          inputType = _this$props.inputType,\n          handleReset = _this$props.handleReset;\n\n      if (!allowClear || disabled || value === undefined || value === null || value === '') {\n        return null;\n      }\n\n      var className = inputType === ClearableInputType[0] ? \"\".concat(prefixCls, \"-textarea-clear-icon\") : \"\".concat(prefixCls, \"-clear-icon\");\n      return React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"filled\",\n        onClick: handleReset,\n        className: className,\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderSuffix\",\n    value: function renderSuffix(prefixCls) {\n      var _this$props2 = this.props,\n          suffix = _this$props2.suffix,\n          allowClear = _this$props2.allowClear;\n\n      if (suffix || allowClear) {\n        return React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-suffix\")\n        }, this.renderClearIcon(prefixCls), suffix);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderLabeledIcon\",\n    value: function renderLabeledIcon(prefixCls, element) {\n      var _classNames;\n\n      var props = this.props;\n      var suffix = this.renderSuffix(prefixCls);\n\n      if (!hasPrefixSuffix(props)) {\n        return React.cloneElement(element, {\n          value: props.value\n        });\n      }\n\n      var prefix = props.prefix ? React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-prefix\")\n      }, props.prefix) : null;\n      var affixWrapperCls = classNames(props.className, \"\".concat(prefixCls, \"-affix-wrapper\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), props.size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), props.size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-affix-wrapper-input-with-clear-btn\"), props.suffix && props.allowClear && this.props.value), _classNames));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: props.style\n      }, prefix, React.cloneElement(element, {\n        style: null,\n        value: props.value,\n        className: getInputClassName(prefixCls, props.size, props.disabled)\n      }), suffix);\n    }\n  }, {\n    key: \"renderInputWithLabel\",\n    value: function renderInputWithLabel(prefixCls, labeledElement) {\n      var _classNames3;\n\n      var _this$props3 = this.props,\n          addonBefore = _this$props3.addonBefore,\n          addonAfter = _this$props3.addonAfter,\n          style = _this$props3.style,\n          size = _this$props3.size,\n          className = _this$props3.className; // Not wrap when there is not addons\n\n      if (!addonBefore && !addonAfter) {\n        return labeledElement;\n      }\n\n      var wrapperClassName = \"\".concat(prefixCls, \"-group\");\n      var addonClassName = \"\".concat(wrapperClassName, \"-addon\");\n      var addonBeforeNode = addonBefore ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonBefore) : null;\n      var addonAfterNode = addonAfter ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonAfter) : null;\n      var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, wrapperClassName, addonBefore || addonAfter));\n      var mergedGroupClassName = classNames(className, \"\".concat(prefixCls, \"-group-wrapper\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-lg\"), size === 'large'), _classNames3)); // Need another wrapper for changing display:table to display:inline-block\n      // and put style prop in wrapper\n\n      return React.createElement(\"span\", {\n        className: mergedGroupClassName,\n        style: style\n      }, React.createElement(\"span\", {\n        className: mergedWrapperClassName\n      }, addonBeforeNode, React.cloneElement(labeledElement, {\n        style: null\n      }), addonAfterNode));\n    }\n  }, {\n    key: \"renderTextAreaWithClearIcon\",\n    value: function renderTextAreaWithClearIcon(prefixCls, element) {\n      var _this$props4 = this.props,\n          value = _this$props4.value,\n          allowClear = _this$props4.allowClear,\n          className = _this$props4.className,\n          style = _this$props4.style;\n\n      if (!allowClear) {\n        return React.cloneElement(element, {\n          value: value\n        });\n      }\n\n      var affixWrapperCls = classNames(className, \"\".concat(prefixCls, \"-affix-wrapper\"), \"\".concat(prefixCls, \"-affix-wrapper-textarea-with-clear-btn\"));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: style\n      }, React.cloneElement(element, {\n        style: null,\n        value: value\n      }), this.renderClearIcon(prefixCls));\n    }\n  }, {\n    key: \"renderClearableLabeledInput\",\n    value: function renderClearableLabeledInput() {\n      var _this$props5 = this.props,\n          prefixCls = _this$props5.prefixCls,\n          inputType = _this$props5.inputType,\n          element = _this$props5.element;\n\n      if (inputType === ClearableInputType[0]) {\n        return this.renderTextAreaWithClearIcon(prefixCls, element);\n      }\n\n      return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.renderClearableLabeledInput();\n    }\n  }]);\n\n  return ClearableLabeledInput;\n}(React.Component);\n\npolyfill(ClearableLabeledInput);\nexport default ClearableLabeledInput;","map":{"version":3,"sources":["input/ClearableLabeledInput.jsx"],"names":["ClearableInputType","tuple","props","ClearableLabeledInput","React","Component","prefixCls","allowClear","value","disabled","inputType","handleReset","className","suffix","element","hasPrefixSuffix","prefix","affixWrapperCls","classNames","style","getInputClassName","labeledElement","addonBefore","addonAfter","size","wrapperClassName","addonClassName","addonBeforeNode","addonAfterNode","mergedWrapperClassName","mergedGroupClassName","polyfill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport { getInputClassName } from './Input';\nconst ClearableInputType = tuple('text', 'input');\nexport function hasPrefixSuffix(props) {\n    return !!(props.prefix || props.suffix || props.allowClear);\n}\nclass ClearableLabeledInput extends React.Component {\n    renderClearIcon(prefixCls) {\n        const { allowClear, value, disabled, inputType, handleReset } = this.props;\n        if (!allowClear || disabled || value === undefined || value === null || value === '') {\n            return null;\n        }\n        const className = inputType === ClearableInputType[0]\n            ? `${prefixCls}-textarea-clear-icon`\n            : `${prefixCls}-clear-icon`;\n        return (<Icon type=\"close-circle\" theme=\"filled\" onClick={handleReset} className={className} role=\"button\"/>);\n    }\n    renderSuffix(prefixCls) {\n        const { suffix, allowClear } = this.props;\n        if (suffix || allowClear) {\n            return (<span className={`${prefixCls}-suffix`}>\n          {this.renderClearIcon(prefixCls)}\n          {suffix}\n        </span>);\n        }\n        return null;\n    }\n    renderLabeledIcon(prefixCls, element) {\n        const props = this.props;\n        const suffix = this.renderSuffix(prefixCls);\n        if (!hasPrefixSuffix(props)) {\n            return React.cloneElement(element, {\n                value: props.value,\n            });\n        }\n        const prefix = props.prefix ? (<span className={`${prefixCls}-prefix`}>{props.prefix}</span>) : null;\n        const affixWrapperCls = classNames(props.className, `${prefixCls}-affix-wrapper`, {\n            [`${prefixCls}-affix-wrapper-sm`]: props.size === 'small',\n            [`${prefixCls}-affix-wrapper-lg`]: props.size === 'large',\n            [`${prefixCls}-affix-wrapper-input-with-clear-btn`]: props.suffix && props.allowClear && this.props.value,\n        });\n        return (<span className={affixWrapperCls} style={props.style}>\n        {prefix}\n        {React.cloneElement(element, {\n            style: null,\n            value: props.value,\n            className: getInputClassName(prefixCls, props.size, props.disabled),\n        })}\n        {suffix}\n      </span>);\n    }\n    renderInputWithLabel(prefixCls, labeledElement) {\n        const { addonBefore, addonAfter, style, size, className } = this.props;\n        // Not wrap when there is not addons\n        if (!addonBefore && !addonAfter) {\n            return labeledElement;\n        }\n        const wrapperClassName = `${prefixCls}-group`;\n        const addonClassName = `${wrapperClassName}-addon`;\n        const addonBeforeNode = addonBefore ? (<span className={addonClassName}>{addonBefore}</span>) : null;\n        const addonAfterNode = addonAfter ? <span className={addonClassName}>{addonAfter}</span> : null;\n        const mergedWrapperClassName = classNames(`${prefixCls}-wrapper`, {\n            [wrapperClassName]: addonBefore || addonAfter,\n        });\n        const mergedGroupClassName = classNames(className, `${prefixCls}-group-wrapper`, {\n            [`${prefixCls}-group-wrapper-sm`]: size === 'small',\n            [`${prefixCls}-group-wrapper-lg`]: size === 'large',\n        });\n        // Need another wrapper for changing display:table to display:inline-block\n        // and put style prop in wrapper\n        return (<span className={mergedGroupClassName} style={style}>\n        <span className={mergedWrapperClassName}>\n          {addonBeforeNode}\n          {React.cloneElement(labeledElement, { style: null })}\n          {addonAfterNode}\n        </span>\n      </span>);\n    }\n    renderTextAreaWithClearIcon(prefixCls, element) {\n        const { value, allowClear, className, style } = this.props;\n        if (!allowClear) {\n            return React.cloneElement(element, {\n                value,\n            });\n        }\n        const affixWrapperCls = classNames(className, `${prefixCls}-affix-wrapper`, `${prefixCls}-affix-wrapper-textarea-with-clear-btn`);\n        return (<span className={affixWrapperCls} style={style}>\n        {React.cloneElement(element, {\n            style: null,\n            value,\n        })}\n        {this.renderClearIcon(prefixCls)}\n      </span>);\n    }\n    renderClearableLabeledInput() {\n        const { prefixCls, inputType, element } = this.props;\n        if (inputType === ClearableInputType[0]) {\n            return this.renderTextAreaWithClearIcon(prefixCls, element);\n        }\n        return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));\n    }\n    render() {\n        return this.renderClearableLabeledInput();\n    }\n}\npolyfill(ClearableLabeledInput);\nexport default ClearableLabeledInput;\n"]},"metadata":{},"sourceType":"module"}