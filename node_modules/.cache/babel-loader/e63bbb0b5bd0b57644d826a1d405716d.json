{"ast":null,"code":"// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n// 实现转化type类型，string， function， class， component， fragment\n// 实现事件\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n  console.log(vnode); // vnodeTree => domTree\n\n  const node = _createNode(vnode);\n\n  container.appendChild(node);\n} // 创建class节点\n\n\nfunction _createComNode() {} // 创建function节点\n\n\nfunction _createFnNode({\n  type,\n  props\n}) {\n  let vvnode = type(props);\n\n  let vnode = _createNode(vvnode);\n\n  return vnode;\n} // 创建节点\n\n\nfunction _createNode(vnode) {\n  const {\n    type,\n    children\n  } = vnode;\n  let node; // 如果vnode是元素节点\n\n  if (type === 'Text') {\n    node = document.createTextNode('');\n  } else if (typeof type === 'function') {\n    node = _createFnNode(vnode);\n  } else {\n    node = document.createElement(type);\n  } //由于存在children，所以需要递归\n\n\n  if (children.length) {\n    _createChildrenNode(children, node);\n  } // 将属性填充进节点中\n\n\n  _updateNode(node, vnode);\n\n  return node;\n} // 接收子节点vnode数组以及父节点dom\n\n\nfunction _createChildrenNode(children, parent) {\n  for (let i = 0; i < children.length; i++) {\n    render(children[i], parent);\n  }\n} // 接收dom以及props，进行赋值\n\n\nfunction _updateNode(node, values) {\n  Object.keys(values).filter(item => item !== 'children').forEach(key => {\n    node[key] = values[key];\n  });\n}\n\nexport default {\n  render\n};","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/plugins/KReactDOM.js"],"names":["render","vnode","container","console","log","node","_createNode","appendChild","_createComNode","_createFnNode","type","props","vvnode","children","document","createTextNode","createElement","length","_createChildrenNode","_updateNode","parent","i","values","Object","keys","filter","item","forEach","key"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAD8B,CAE9B;;AACA,QAAMI,IAAI,GAAGC,WAAW,CAACL,KAAD,CAAxB;;AAEAC,EAAAA,SAAS,CAACK,WAAV,CAAsBF,IAAtB;AACH,C,CAED;;;AACA,SAASG,cAAT,GAA0B,CAEzB,C,CAED;;;AACA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAvB,EAAwC;AACpC,MAAIC,MAAM,GAAGF,IAAI,CAACC,KAAD,CAAjB;;AACA,MAAIV,KAAK,GAAGK,WAAW,CAACM,MAAD,CAAvB;;AACA,SAAOX,KAAP;AACH,C,CAED;;;AACA,SAASK,WAAT,CAAqBL,KAArB,EAA4B;AACxB,QAAM;AAAES,IAAAA,IAAF;AAAQG,IAAAA;AAAR,MAAqBZ,KAA3B;AACA,MAAII,IAAJ,CAFwB,CAGxB;;AACA,MAAIK,IAAI,KAAK,MAAb,EAAqB;AACjBL,IAAAA,IAAI,GAAGS,QAAQ,CAACC,cAAT,CAAwB,EAAxB,CAAP;AACH,GAFD,MAEO,IAAI,OAAOL,IAAP,KAAgB,UAApB,EAAgC;AACnCL,IAAAA,IAAI,GAAGI,aAAa,CAACR,KAAD,CAApB;AACH,GAFM,MAEA;AACHI,IAAAA,IAAI,GAAGS,QAAQ,CAACE,aAAT,CAAuBN,IAAvB,CAAP;AACH,GAVuB,CAYxB;;;AACA,MAAIG,QAAQ,CAACI,MAAb,EAAqB;AACjBC,IAAAA,mBAAmB,CAACL,QAAD,EAAWR,IAAX,CAAnB;AACH,GAfuB,CAiBxB;;;AACAc,EAAAA,WAAW,CAACd,IAAD,EAAOJ,KAAP,CAAX;;AAEA,SAAOI,IAAP;AACH,C,CAED;;;AACA,SAASa,mBAAT,CAA6BL,QAA7B,EAAuCO,MAAvC,EAA+C;AAC3C,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,QAAQ,CAACI,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrCrB,IAAAA,MAAM,CAACa,QAAQ,CAACQ,CAAD,CAAT,EAAcD,MAAd,CAAN;AACH;AACJ,C,CAED;;;AACA,SAASD,WAAT,CAAqBd,IAArB,EAA2BiB,MAA3B,EAAmC;AAC/BC,EAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACKG,MADL,CACYC,IAAI,IAAIA,IAAI,KAAK,UAD7B,EAEKC,OAFL,CAEaC,GAAG,IAAI;AACZvB,IAAAA,IAAI,CAACuB,GAAD,CAAJ,GAAYN,MAAM,CAACM,GAAD,CAAlB;AACH,GAJL;AAKH;;AAED,eAAe;AACX5B,EAAAA;AADW,CAAf","sourcesContent":["// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n\n// 实现转化type类型，string， function， class， component， fragment\n// 实现事件\n\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n    console.log(vnode);\n    // vnodeTree => domTree\n    const node = _createNode(vnode);\n\n    container.appendChild(node);\n}\n\n// 创建class节点\nfunction _createComNode() {\n    \n}\n\n// 创建function节点\nfunction _createFnNode({ type, props }) {\n    let vvnode = type(props);\n    let vnode = _createNode(vvnode);\n    return vnode;\n}\n\n// 创建节点\nfunction _createNode(vnode) {\n    const { type, children } = vnode;\n    let node;\n    // 如果vnode是元素节点\n    if (type === 'Text') {\n        node = document.createTextNode('');\n    } else if (typeof type === 'function') {\n        node = _createFnNode(vnode);\n    } else {\n        node = document.createElement(type);\n    }\n    \n    //由于存在children，所以需要递归\n    if (children.length) {\n        _createChildrenNode(children, node);\n    }\n\n    // 将属性填充进节点中\n    _updateNode(node, vnode);\n\n    return node;\n}\n\n// 接收子节点vnode数组以及父节点dom\nfunction _createChildrenNode(children, parent) {\n    for(let i = 0; i < children.length; i++) {\n        render(children[i], parent);\n    }\n}\n\n// 接收dom以及props，进行赋值\nfunction _updateNode(node, values) {\n    Object.keys(values)\n        .filter(item => item !== 'children')\n        .forEach(key => {\n            node[key] = values[key];\n        })\n}\n\nexport default {\n    render\n}"]},"metadata":{},"sourceType":"module"}