{"ast":null,"code":"// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n  // vnodeTree => domTree\n  const node = _createNode(vnode);\n\n  container.appendChild(node);\n} // 创建节点\n\n\nfunction _createNode(vnode) {\n  const {\n    type,\n    children\n  } = vnode;\n  let node; // 如果vnode是元素节点\n\n  if (type === 'Text') {\n    node = document.createTextNode('');\n  } else {\n    node = document.createElement(type);\n  } //由于存在children，所以需要递归\n\n\n  _createChildrenNode(children, vnode);\n\n  return node;\n} // 接收子节点vnode数组以及父节点dom\n\n\nfunction _createChildrenNode(children, parent) {\n  for (let i = 0; i < children.length; i++) {\n    render(children, parent);\n  }\n}\n\nexport default {\n  render\n};","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/plugins/KReactDOM.js"],"names":["render","vnode","container","node","_createNode","appendChild","type","children","document","createTextNode","createElement","_createChildrenNode","parent","i","length"],"mappings":"AAAA;AACA;AAEA;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC;AAE9B;AACA,QAAMC,IAAI,GAAGC,WAAW,CAACH,KAAD,CAAxB;;AAEAC,EAAAA,SAAS,CAACG,WAAV,CAAsBF,IAAtB;AACH,C,CAED;;;AACA,SAASC,WAAT,CAAqBH,KAArB,EAA4B;AACxB,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBN,KAA3B;AACA,MAAIE,IAAJ,CAFwB,CAGxB;;AACA,MAAIG,IAAI,KAAK,MAAb,EAAqB;AACjBH,IAAAA,IAAI,GAAGK,QAAQ,CAACC,cAAT,CAAwB,EAAxB,CAAP;AACH,GAFD,MAEO;AACHN,IAAAA,IAAI,GAAGK,QAAQ,CAACE,aAAT,CAAuBJ,IAAvB,CAAP;AACH,GARuB,CAUxB;;;AACAK,EAAAA,mBAAmB,CAACJ,QAAD,EAAWN,KAAX,CAAnB;;AAEA,SAAOE,IAAP;AACH,C,CAED;;;AACA,SAASQ,mBAAT,CAA6BJ,QAA7B,EAAuCK,MAAvC,EAA+C;AAC3C,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,QAAQ,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCb,IAAAA,MAAM,CAACO,QAAD,EAAWK,MAAX,CAAN;AACH;AACJ;;AAED,eAAe;AACXZ,EAAAA;AADW,CAAf","sourcesContent":["// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n\n    // vnodeTree => domTree\n    const node = _createNode(vnode);\n\n    container.appendChild(node);\n}\n\n// 创建节点\nfunction _createNode(vnode) {\n    const { type, children } = vnode;\n    let node;\n    // 如果vnode是元素节点\n    if (type === 'Text') {\n        node = document.createTextNode('');\n    } else {\n        node = document.createElement(type);\n    }\n\n    //由于存在children，所以需要递归\n    _createChildrenNode(children, vnode);\n\n    return node;\n}\n\n// 接收子节点vnode数组以及父节点dom\nfunction _createChildrenNode(children, parent) {\n    for(let i = 0; i < children.length; i++) {\n        render(children, parent);\n    }\n}\n\nexport default {\n    render\n}"]},"metadata":{},"sourceType":"module"}