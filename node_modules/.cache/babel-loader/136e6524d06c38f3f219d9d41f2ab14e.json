{"ast":null,"code":"// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n  // vnodeTree => domTree\n  const node = _createNode(vnode);\n\n  container.appendChild(node);\n} // 创建节点\n\n\nfunction _createNode(vnode) {\n  const {\n    type\n  } = vnode;\n  let node; // 如果vnode是元素节点\n\n  if (type === 'Text') {\n    node = document.createTextNode('');\n  } else {\n    node = document.createElement(type);\n  } //由于存在children，所以需要递归\n\n\n  _createChildrenNode(type.children, vnode);\n\n  return node;\n} // 接收子节点vnode数组以及父节点dom\n\n\nfunction _createChildrenNode(childrens, parent) {\n  childrens.map(children => {\n    render(children, parent);\n  });\n}\n\nexport default {\n  render\n};","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/plugins/KReactDOM.js"],"names":["render","vnode","container","node","_createNode","appendChild","type","document","createTextNode","createElement","_createChildrenNode","children","childrens","parent","map"],"mappings":"AAAA;AACA;AAEA;AACA,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC;AAE9B;AACA,QAAMC,IAAI,GAAGC,WAAW,CAACH,KAAD,CAAxB;;AAEAC,EAAAA,SAAS,CAACG,WAAV,CAAsBF,IAAtB;AACH,C,CAED;;;AACA,SAASC,WAAT,CAAqBH,KAArB,EAA4B;AACxB,QAAM;AAAEK,IAAAA;AAAF,MAAWL,KAAjB;AACA,MAAIE,IAAJ,CAFwB,CAGxB;;AACA,MAAIG,IAAI,KAAK,MAAb,EAAqB;AACjBH,IAAAA,IAAI,GAAGI,QAAQ,CAACC,cAAT,CAAwB,EAAxB,CAAP;AACH,GAFD,MAEO;AACHL,IAAAA,IAAI,GAAGI,QAAQ,CAACE,aAAT,CAAuBH,IAAvB,CAAP;AACH,GARuB,CAUxB;;;AACAI,EAAAA,mBAAmB,CAACJ,IAAI,CAACK,QAAN,EAAgBV,KAAhB,CAAnB;;AAEA,SAAOE,IAAP;AACH,C,CAED;;;AACA,SAASO,mBAAT,CAA6BE,SAA7B,EAAwCC,MAAxC,EAAgD;AAC5CD,EAAAA,SAAS,CAACE,GAAV,CAAcH,QAAQ,IAAI;AACtBX,IAAAA,MAAM,CAACW,QAAD,EAAWE,MAAX,CAAN;AACH,GAFD;AAGH;;AAED,eAAe;AACXb,EAAAA;AADW,CAAf","sourcesContent":["// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n\n    // vnodeTree => domTree\n    const node = _createNode(vnode);\n\n    container.appendChild(node);\n}\n\n// 创建节点\nfunction _createNode(vnode) {\n    const { type } = vnode;\n    let node;\n    // 如果vnode是元素节点\n    if (type === 'Text') {\n        node = document.createTextNode('');\n    } else {\n        node = document.createElement(type);\n    }\n\n    //由于存在children，所以需要递归\n    _createChildrenNode(type.children, vnode);\n\n    return node;\n}\n\n// 接收子节点vnode数组以及父节点dom\nfunction _createChildrenNode(childrens, parent) {\n    childrens.map(children => {\n        render(children, parent);\n    })\n}\n\nexport default {\n    render\n}"]},"metadata":{},"sourceType":"module"}