{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger'; // import { createStore, applyMiddleware } from '../plugins/KRedux';\n// import thunk from '../plugins/thunk';\n// import logger from '../plugins/logger';\n\nfunction counterRedurce(state = 0, action) {\n  console.log(action);\n  let num = action.ployed || 1;\n\n  switch (action.type) {\n    case 'ADD':\n      return state + num;\n\n    case 'MINUS':\n      return state + num;\n\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(combineReducers({\n  count: counterRedurce\n}), applyMiddleware(logger, thunk));\nexport default store;","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/store/index.js"],"names":["createStore","applyMiddleware","combineReducers","thunk","logger","counterRedurce","state","action","console","log","num","ployed","type","store","count"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;AACA;AACA;;AAEA,SAASC,cAAT,CAAwBC,KAAK,GAAG,CAAhC,EAAmCC,MAAnC,EAA2C;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,MAAIG,GAAG,GAAGH,MAAM,CAACI,MAAP,IAAiB,CAA3B;;AACA,UAAOJ,MAAM,CAACK,IAAd;AACI,SAAK,KAAL;AACI,aAAON,KAAK,GAAGI,GAAf;;AACJ,SAAK,OAAL;AACI,aAAOJ,KAAK,GAAGI,GAAf;;AACJ;AACI,aAAOJ,KAAP;AANR;AAQH;;AAED,MAAMO,KAAK,GAAGb,WAAW,CAACE,eAAe,CAAC;AAAEY,EAAAA,KAAK,EAAET;AAAT,CAAD,CAAhB,EAA6CJ,eAAe,CAACG,MAAD,EAASD,KAAT,CAA5D,CAAzB;AAEA,eAAeU,KAAf","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\n// import { createStore, applyMiddleware } from '../plugins/KRedux';\n// import thunk from '../plugins/thunk';\n// import logger from '../plugins/logger';\n\nfunction counterRedurce(state = 0, action) {\n    console.log(action);\n    let num = action.ployed || 1;\n    switch(action.type) {\n        case 'ADD':\n            return state + num;\n        case 'MINUS':\n            return state + num;\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(combineReducers({ count: counterRedurce }), applyMiddleware(logger, thunk));\n\nexport default store;"]},"metadata":{},"sourceType":"module"}