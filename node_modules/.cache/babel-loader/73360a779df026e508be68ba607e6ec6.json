{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { takeEvery, call, put } from 'redux-saga/effects'; // import { createStore, applyMiddleware } from '../plugins/KRedux';\n// import thunk from '../plugins/thunk';\n// import logger from '../plugins/logger';\n\nfunction counterRedurce(state = 0, action) {\n  let num = action.ployed || 1;\n\n  switch (action.type) {\n    case 'ADD':\n      return state + num;\n\n    case 'MINUS':\n      return state + num;\n\n    default:\n      return state;\n  }\n}\n\nlet initUser = {\n  isLogin: false,\n  user: {\n    name: null\n  }\n};\n\nfunction loginRedurce(state = { ...initUser\n}, action) {\n  switch (action.type) {\n    case 'LOGININ_SUCCESS':\n      return {\n        isLogin: true,\n        user: {\n          name: action.user || 'xiaoming'\n        }\n      };\n\n    case 'LOGINOUT_SUCCESS':\n      return {\n        isLogin: false,\n        user: {\n          name: null\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction mockData(action) {\n  return new Promise(reslove => {\n    setTimeout(() => {\n      reslove({\n        name: 'xiaohong'\n      });\n    }, 1000);\n  });\n} // eslint-disable-next-line require-yield\n\n\nfunction* loginSaga(action) {\n  const user = yield call(mockData, action.type);\n  yield put({\n    type: 'LOGININ_SUCCESS',\n    user\n  });\n}\n\nfunction* mySaga() {\n  yield takeEvery('LOGININ', loginSaga);\n}\n\nconst saga = createSagaMiddleware();\nconst store = createStore(combineReducers({\n  count: counterRedurce,\n  login: loginRedurce\n}), applyMiddleware(logger, thunk, saga));\nsaga.run(mySaga);\nexport default store;","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/store/index.js"],"names":["createStore","applyMiddleware","combineReducers","thunk","logger","createSagaMiddleware","takeEvery","call","put","counterRedurce","state","action","num","ployed","type","initUser","isLogin","user","name","loginRedurce","mockData","Promise","reslove","setTimeout","loginSaga","mySaga","saga","store","count","login","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC,C,CAEA;AACA;AACA;;AAEA,SAASC,cAAT,CAAwBC,KAAK,GAAG,CAAhC,EAAmCC,MAAnC,EAA2C;AACvC,MAAIC,GAAG,GAAGD,MAAM,CAACE,MAAP,IAAiB,CAA3B;;AACA,UAAOF,MAAM,CAACG,IAAd;AACI,SAAK,KAAL;AACI,aAAOJ,KAAK,GAAGE,GAAf;;AACJ,SAAK,OAAL;AACI,aAAOF,KAAK,GAAGE,GAAf;;AACJ;AACI,aAAOF,KAAP;AANR;AAQH;;AAED,IAAIK,QAAQ,GAAG;AACXC,EAAAA,OAAO,EAAE,KADE;AAEXC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE;AADJ;AAFK,CAAf;;AAOA,SAASC,YAAT,CAAsBT,KAAK,GAAG,EAAC,GAAGK;AAAJ,CAA9B,EAA6CJ,MAA7C,EAAqD;AACjD,UAAOA,MAAM,CAACG,IAAd;AACI,SAAK,iBAAL;AACI,aAAO;AACHE,QAAAA,OAAO,EAAE,IADN;AAEHC,QAAAA,IAAI,EAAE;AACFC,UAAAA,IAAI,EAAEP,MAAM,CAACM,IAAP,IAAe;AADnB;AAFH,OAAP;;AAMJ,SAAK,kBAAL;AACI,aAAO;AACHD,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAE;AACFC,UAAAA,IAAI,EAAE;AADJ;AAFH,OAAP;;AAMJ;AACI,aAAOR,KAAP;AAhBR;AAkBH;;AAED,SAASU,QAAT,CAAkBT,MAAlB,EAA0B;AACtB,SAAO,IAAIU,OAAJ,CAAaC,OAAD,IAAa;AAC5BC,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,OAAO,CAAC;AACJJ,QAAAA,IAAI,EAAE;AADF,OAAD,CAAP;AAGH,KAJS,EAIP,IAJO,CAAV;AAKH,GANM,CAAP;AAOH,C,CAED;;;AACA,UAAUM,SAAV,CAAoBb,MAApB,EAA4B;AACxB,QAAMM,IAAI,GAAG,MAAMV,IAAI,CAACa,QAAD,EAAWT,MAAM,CAACG,IAAlB,CAAvB;AAEA,QAAMN,GAAG,CAAC;AAAEM,IAAAA,IAAI,EAAE,iBAAR;AAA2BG,IAAAA;AAA3B,GAAD,CAAT;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,QAAMnB,SAAS,CAAC,SAAD,EAAYkB,SAAZ,CAAf;AACH;;AAED,MAAME,IAAI,GAAGrB,oBAAoB,EAAjC;AAEA,MAAMsB,KAAK,GAAG3B,WAAW,CAACE,eAAe,CAAC;AAAE0B,EAAAA,KAAK,EAAEnB,cAAT;AAAyBoB,EAAAA,KAAK,EAAEV;AAAhC,CAAD,CAAhB,EAAkElB,eAAe,CAACG,MAAD,EAASD,KAAT,EAAgBuB,IAAhB,CAAjF,CAAzB;AAEAA,IAAI,CAACI,GAAL,CAASL,MAAT;AAEA,eAAeE,KAAf","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { takeEvery, call, put } from 'redux-saga/effects';\n\n// import { createStore, applyMiddleware } from '../plugins/KRedux';\n// import thunk from '../plugins/thunk';\n// import logger from '../plugins/logger';\n\nfunction counterRedurce(state = 0, action) {\n    let num = action.ployed || 1;\n    switch(action.type) {\n        case 'ADD':\n            return state + num;\n        case 'MINUS':\n            return state + num;\n        default:\n            return state;\n    }\n}\n\nlet initUser = {\n    isLogin: false,\n    user: {\n        name: null\n    }\n}\n\nfunction loginRedurce(state = {...initUser}, action) {\n    switch(action.type) {\n        case 'LOGININ_SUCCESS':\n            return {\n                isLogin: true,\n                user: {\n                    name: action.user || 'xiaoming'\n                }\n            };\n        case 'LOGINOUT_SUCCESS':\n            return {\n                isLogin: false,\n                user: {\n                    name: null\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nfunction mockData(action) {\n    return new Promise((reslove) => {\n        setTimeout(() => {\n            reslove({\n                name: 'xiaohong'\n            });\n        }, 1000);\n    })\n}\n\n// eslint-disable-next-line require-yield\nfunction* loginSaga(action) {\n    const user = yield call(mockData, action.type);\n    \n    yield put({ type: 'LOGININ_SUCCESS', user });\n}\n\nfunction* mySaga() {\n    yield takeEvery('LOGININ', loginSaga);\n}\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(combineReducers({ count: counterRedurce, login: loginRedurce }), applyMiddleware(logger, thunk, saga));\n\nsaga.run(mySaga);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}