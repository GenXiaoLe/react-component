{"ast":null,"code":"// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n// 实现转化type类型，string， function， class， component， fragment\n// 实现事件\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n  console.log(vnode);\n  let node; // vnodeTree => domTree\n\n  if (Array.isArray(vnode)) {\n    vnode.forEach(item => {\n      node = _createNode(item);\n    });\n  } else {\n    node = _createNode(vnode);\n  }\n\n  container.appendChild(node);\n} // 创建class节点\n\n\nfunction _createComNode({\n  type,\n  props\n}) {\n  let comp = new type(props);\n  let vvnode = comp.render();\n\n  let vnode = _createNode(vvnode);\n\n  return vnode;\n} // 创建function节点\n\n\nfunction _createFnNode({\n  type,\n  props\n}) {\n  let vvnode = type(props);\n\n  let vnode = _createNode(vvnode);\n\n  return vnode;\n} // 创建节点\n\n\nfunction _createNode(vnode) {\n  const {\n    type,\n    children\n  } = vnode;\n  let node; // 如果vnode是文本节点\n\n  if (type === 'Text') {\n    node = document.createTextNode('');\n  } else if (typeof type === 'function') {\n    // 如果是class组件节点\n    if (type.prototype.isReactComponent) {\n      node = _createComNode(vnode);\n    } else {\n      // 如果是function组件节点\n      node = _createFnNode(vnode);\n    }\n  } else if (type === undefined) {\n    // 如果type是一个fragment\n    // document。createDocumentFragment 将文档碎片插入到父元素\n    node = document.createDocumentFragment();\n  } else {\n    // 如果是元素节点\n    node = document.createElement(type);\n  } //由于存在children，所以需要递归\n\n\n  if (children.length) {\n    _createChildrenNode(children, node);\n  } // 将属性填充进节点中\n\n\n  if (type) {\n    _updateNode(node, vnode);\n  }\n\n  return node;\n} // 接收子节点vnode数组以及父节点dom\n\n\nfunction _createChildrenNode(children, parent) {\n  for (let i = 0; i < children.length; i++) {\n    render(children[i], parent);\n  }\n} // 接收dom以及props，进行赋值\n\n\nfunction _updateNode(node, values) {\n  Object.keys(values).filter(item => item !== 'children').forEach(key => {\n    node[key] = values[key];\n  });\n}\n\nexport default {\n  render\n};","map":{"version":3,"sources":["/Users/hanyue/development/github/react-components/src/plugins/KReactDOM.js"],"names":["render","vnode","container","console","log","node","Array","isArray","forEach","item","_createNode","appendChild","_createComNode","type","props","comp","vvnode","_createFnNode","children","document","createTextNode","prototype","isReactComponent","undefined","createDocumentFragment","createElement","length","_createChildrenNode","_updateNode","parent","i","values","Object","keys","filter","key"],"mappings":"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","sourcesContent":["// vode => dom\n// render 接收vnode和传入的插入父节点 返回真实dom\n\n// 实现转化type类型，string， function， class， component， fragment\n// 实现事件\n\n// 虚拟dom转化为真实dom\nfunction render(vnode, container) {\n    console.log(vnode);\n    let node;\n    // vnodeTree => domTree\n    if (Array.isArray(vnode)) {\n        vnode.forEach(item => {\n            node = _createNode(item);\n        })\n    } else {\n        node = _createNode(vnode);\n    }\n\n    container.appendChild(node);\n}\n\n// 创建class节点\nfunction _createComNode({ type, props }) {\n    let comp = new type(props);\n    let vvnode = comp.render();\n    let vnode = _createNode(vvnode);\n    return vnode;\n}\n\n// 创建function节点\nfunction _createFnNode({ type, props }) {\n    let vvnode = type(props);\n    let vnode = _createNode(vvnode);\n    return vnode;\n}\n\n// 创建节点\nfunction _createNode(vnode) {\n    const { type, children } = vnode;\n    let node;\n    // 如果vnode是文本节点\n    if (type === 'Text') {\n        node = document.createTextNode('');\n    } else if (typeof type === 'function') {\n        // 如果是class组件节点\n        if (type.prototype.isReactComponent) {\n           node =  _createComNode(vnode);\n        } else {\n            // 如果是function组件节点\n            node = _createFnNode(vnode);\n        }\n    } else if (type === undefined) {\n        // 如果type是一个fragment\n        // document。createDocumentFragment 将文档碎片插入到父元素\n        node = document.createDocumentFragment();\n    } else {\n        // 如果是元素节点\n        node = document.createElement(type);\n    }\n    \n    //由于存在children，所以需要递归\n    if (children.length) {\n        _createChildrenNode(children, node);\n    }\n\n    // 将属性填充进节点中\n    if (type) {\n        _updateNode(node, vnode);\n    }\n\n    return node;\n}\n\n// 接收子节点vnode数组以及父节点dom\nfunction _createChildrenNode(children, parent) {\n    for(let i = 0; i < children.length; i++) {\n        render(children[i], parent);\n    }\n}\n\n// 接收dom以及props，进行赋值\nfunction _updateNode(node, values) {\n    Object.keys(values)\n        .filter(item => item !== 'children')\n        .forEach(key => {\n            node[key] = values[key];\n        })\n}\n\nexport default {\n    render\n}"]},"metadata":{},"sourceType":"module"}